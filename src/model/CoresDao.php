<?php
			
	/**
	 * Generated by Getz Framework.
	 * 
	 * @author  Mario Sakamoto <mskamot@gmail.com>
	 * @see     https://wtag.com.br/getz 
	 * @since   1.0.0
	 * @version 1.0.0	 
	 */
	 
	namespace src\model; 
	use src\model;
	
	class CoresDao {
		
		private $connection;
		private $size;
		private $log;
		private $columns = CORES . DOT. ID . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . CORES . DOT . ID . DOUBLE_QUOTES . COMMA . WHITE_SPACE . CORES . DOT. COR . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . CORES . DOT . COR . DOUBLE_QUOTES . COMMA . WHITE_SPACE . CORES . DOT. HEXADECIMAL . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . CORES . DOT . HEXADECIMAL . DOUBLE_QUOTES . COMMA . WHITE_SPACE . CORES . DOT. CADASTRADO . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . CORES . DOT . CADASTRADO . DOUBLE_QUOTES . COMMA . WHITE_SPACE . CORES . DOT. MODIFICADO . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . CORES . DOT . MODIFICADO . DOUBLE_QUOTES;
		
		public function __construct($connection) {
			$this->connection = $connection;
		}
		
		public function getInsertId() {
			return $this->connection->getInsertId();
		}

		public function getSize() {
			return $this->size;
		}

		private function setLog($log) {
			$this->log = $log;
		}
		
		public function getLog() {
			return $this->log;
		}
		
		public function getColumns() {
			return $this->columns;
		}
		
		public function create($cores) {
			$query = INSERT . WHITE_SPACE . INTO . WHITE_SPACE . CORES . WHITE_SPACE . LEFT_PARENTHESES . COR . COMMA . WHITE_SPACE . HEXADECIMAL . COMMA . WHITE_SPACE . CADASTRADO . COMMA . WHITE_SPACE . MODIFICADO . COMMA . WHITE_SPACE . TIPO_COR . RIGHT_PARENTHESES . WHITE_SPACE . VALUES . WHITE_SPACE . LEFT_PARENTHESES . DOUBLE_QUOTES . $cores->getCor() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $cores->getHexadecimal() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $cores->getCadastrado() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $cores->getModificado() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $cores->getTipos_cores()->getId() . DOUBLE_QUOTES . RIGHT_PARENTHESES;
			$this->setLog($query);
			return $this->connection->execute($query);
		}

		public function read($where, $order, $hasPagination) {
			$count = NUMBER_ZERO;
			if ($where != STRING_EMPTY) {
				$where = WHERE . WHITE_SPACE . $where . WHITE_SPACE . STRING_AND . WHITE_SPACE . CORES . DOT . TIPO_COR . WHITE_SPACE . EQUALS . WHITE_SPACE. TIPOS_CORES . DOT . ID;
			} else {
				$where = WHERE . WHITE_SPACE . CORES . DOT . TIPO_COR . WHITE_SPACE . EQUALS . WHITE_SPACE. TIPOS_CORES . DOT . ID;
			}
			if ($order != STRING_EMPTY) {
				$order = ORDER_BY . WHITE_SPACE . $order;
			}
			$tipos_coresDao = new model\Tipos_coresDao($this->connection);
			$query = SELECT . WHITE_SPACE . $this->columns . COMMA . WHITE_SPACE . $tipos_coresDao->getColumns() . WHITE_SPACE . FROM . WHITE_SPACE . CORES . WHITE_SPACE . CORES . COMMA . WHITE_SPACE . TIPOS_CORES . WHITE_SPACE . TIPOS_CORES . WHITE_SPACE . $where;
			$this->setLog($query . WHITE_SPACE . $order);
			$result = $this->connection->execute($query . WHITE_SPACE . $order);
			$coresList = array();
			while ($row = $result->fetch_assoc()) {
				$cores = new model\Cores();
				$cores->setId($row[CORES . POINT . ID]);
				$cores->setCor($row[CORES . POINT . COR]);
				$cores->setHexadecimal($row[CORES . POINT . HEXADECIMAL]);
				$cores->setCadastrado($row[CORES . POINT . CADASTRADO]);
				$cores->setModificado($row[CORES . POINT . MODIFICADO]);
				$tipos_cores = new model\Tipos_cores();
				$tipos_cores->setId($row[TIPOS_CORES . DOT . ID]);
				$tipos_cores->setTipo_cor($row[TIPOS_CORES . DOT . TIPO_COR]);
				$cores->setTipos_cores($tipos_cores);
				$coresList[$count] = $cores;
				$count++;
			}
			$this->connection->free($result);
			if ($hasPagination && $count > NUMBER_ZERO) {
				$result = $this->connection->execute($query);
				$size = NUMBER_ZERO;
				while ($row = $result->fetch_assoc()) {
					$size++;
				}
				$this->connection->free($result);				
				$this->size = $size;
			}
			return $coresList;
		}

		public function update($cores) {
			$query = UPDATE . WHITE_SPACE . CORES . WHITE_SPACE . SET . WHITE_SPACE . ID . WHITE_SPACE . EQUALS . 
					WHITE_SPACE . DOUBLE_QUOTES . $cores->getId() . DOUBLE_QUOTES;
			if (!is_null($cores->getCor()) && !empty($cores->getCor())) {
				$query .= COMMA . WHITE_SPACE . COR . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$cores->getCor() . DOUBLE_QUOTES;
			}
			if (!is_null($cores->getHexadecimal()) && !empty($cores->getHexadecimal())) {
				$query .= COMMA . WHITE_SPACE . HEXADECIMAL . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$cores->getHexadecimal() . DOUBLE_QUOTES;
			}
			if (!is_null($cores->getTipos_cores()) && !empty($cores->getTipos_cores()->getId()) &&  
					!empty($cores->getTipos_cores()->getId())) {
				$query .= COMMA . WHITE_SPACE . TIPO_COR . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$cores->getTipos_cores()->getId() . DOUBLE_QUOTES;
			}
			$query .= COMMA . WHITE_SPACE . MODIFICADO . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
					$cores->getModificado() . DOUBLE_QUOTES . WHITE_SPACE . WHERE . WHITE_SPACE . ID . EQUALS . 
					$cores->getId();
			$this->setLog($query);
			return $this->connection->execute($query);
		}

		public function delete($cores) {
			$query = DELETE . WHITE_SPACE . FROM . WHITE_SPACE . CORES . WHITE_SPACE . WHERE . WHITE_SPACE . ID . 
					WHITE_SPACE . EQUALS . WHITE_SPACE . $cores->getId();
			$this->setLog($query);
			return $this->connection->execute($query);
		}

	}

?>