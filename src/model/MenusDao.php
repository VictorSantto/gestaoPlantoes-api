<?php
			
	/**
	 * Generated by Getz Framework.
	 * 
	 * @author  Mario Sakamoto <mskamot@gmail.com>
	 * @see     https://wtag.com.br/getz 
	 * @since   1.0.0
	 * @version 1.0.0	 
	 */
	 
	namespace src\model; 
	use src\model;
	
	class MenusDao {
		
		private $connection;
		private $size;
		private $log;
		private $columns = MENUS . DOT. ID . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . MENUS . DOT . ID . DOUBLE_QUOTES . COMMA . WHITE_SPACE . MENUS . DOT. MENU . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . MENUS . DOT . MENU . DOUBLE_QUOTES . COMMA . WHITE_SPACE . MENUS . DOT. LINK . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . MENUS . DOT . LINK . DOUBLE_QUOTES . COMMA . WHITE_SPACE . MENUS . DOT. ORDEM . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . MENUS . DOT . ORDEM . DOUBLE_QUOTES . COMMA . WHITE_SPACE . MENUS . DOT. CADASTRADO . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . MENUS . DOT . CADASTRADO . DOUBLE_QUOTES . COMMA . WHITE_SPACE . MENUS . DOT. MODIFICADO . WHITE_SPACE . STRING_AS . WHITE_SPACE . DOUBLE_QUOTES . MENUS . DOT . MODIFICADO . DOUBLE_QUOTES;
		
		public function __construct($connection) {
			$this->connection = $connection;
		}
		
		public function getInsertId() {
			return $this->connection->getInsertId();
		}

		public function getSize() {
			return $this->size;
		}

		private function setLog($log) {
			$this->log = $log;
		}
		
		public function getLog() {
			return $this->log;
		}
		
		public function getColumns() {
			return $this->columns;
		}
		
		public function create($menus) {
			$query = INSERT . WHITE_SPACE . INTO . WHITE_SPACE . MENUS . WHITE_SPACE . LEFT_PARENTHESES . MENU . COMMA . WHITE_SPACE . LINK . COMMA . WHITE_SPACE . ORDEM . COMMA . WHITE_SPACE . CADASTRADO . COMMA . WHITE_SPACE . MODIFICADO . COMMA . WHITE_SPACE . TIPO_MENU . COMMA . WHITE_SPACE . SITUACAO_REGISTRO . RIGHT_PARENTHESES . WHITE_SPACE . VALUES . WHITE_SPACE . LEFT_PARENTHESES . DOUBLE_QUOTES . $menus->getMenu() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $menus->getLink() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $menus->getOrdem() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $menus->getCadastrado() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $menus->getModificado() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $menus->getTipos_menus()->getId() . DOUBLE_QUOTES . COMMA . WHITE_SPACE . DOUBLE_QUOTES . $menus->getSituacoes_registros()->getId() . DOUBLE_QUOTES . RIGHT_PARENTHESES;
			$this->setLog($query);
			return $this->connection->execute($query);
		}

		public function read($where, $order, $hasPagination) {
			$count = NUMBER_ZERO;
			if ($where != STRING_EMPTY) {
				$where = WHERE . WHITE_SPACE . $where . WHITE_SPACE . STRING_AND . WHITE_SPACE . MENUS . DOT . TIPO_MENU . WHITE_SPACE . EQUALS . WHITE_SPACE. TIPOS_MENUS . DOT . ID . WHITE_SPACE . STRING_AND . WHITE_SPACE . MENUS . DOT . SITUACAO_REGISTRO . WHITE_SPACE . EQUALS . WHITE_SPACE. SITUACOES_REGISTROS . DOT . ID;
			} else {
				$where = WHERE . WHITE_SPACE . MENUS . DOT . TIPO_MENU . WHITE_SPACE . EQUALS . WHITE_SPACE. TIPOS_MENUS . DOT . ID . WHITE_SPACE . STRING_AND . WHITE_SPACE . MENUS . DOT . SITUACAO_REGISTRO . WHITE_SPACE . EQUALS . WHITE_SPACE. SITUACOES_REGISTROS . DOT . ID;
			}
			if ($order != STRING_EMPTY) {
				$order = ORDER_BY . WHITE_SPACE . $order;
			}
			$tipos_menusDao = new model\Tipos_menusDao($this->connection);
			$situacoes_registrosDao = new model\Situacoes_registrosDao($this->connection);
			$query = SELECT . WHITE_SPACE . $this->columns . COMMA . WHITE_SPACE . $tipos_menusDao->getColumns() . COMMA . WHITE_SPACE . $situacoes_registrosDao->getColumns() . WHITE_SPACE . FROM . WHITE_SPACE . MENUS . WHITE_SPACE . MENUS . COMMA . WHITE_SPACE . TIPOS_MENUS . WHITE_SPACE . TIPOS_MENUS . COMMA . WHITE_SPACE . SITUACOES_REGISTROS . WHITE_SPACE . SITUACOES_REGISTROS . WHITE_SPACE . $where;
			$this->setLog($query . WHITE_SPACE . $order);
			$result = $this->connection->execute($query . WHITE_SPACE . $order);
			$menusList = array();
			while ($row = $result->fetch_assoc()) {
				$menus = new model\Menus();
				$menus->setId($row[MENUS . POINT . ID]);
				$menus->setMenu($row[MENUS . POINT . MENU]);
				$menus->setLink($row[MENUS . POINT . LINK]);
				$menus->setOrdem($row[MENUS . POINT . ORDEM]);
				$menus->setCadastrado($row[MENUS . POINT . CADASTRADO]);
				$menus->setModificado($row[MENUS . POINT . MODIFICADO]);
				$tipos_menus = new model\Tipos_menus();
				$tipos_menus->setId($row[TIPOS_MENUS . DOT . ID]);
				$tipos_menus->setTipo_menu($row[TIPOS_MENUS . DOT . TIPO_MENU]);
				$menus->setTipos_menus($tipos_menus);
				$situacoes_registros = new model\Situacoes_registros();
				$situacoes_registros->setId($row[SITUACOES_REGISTROS . DOT . ID]);
				$situacoes_registros->setSituacao_registro($row[SITUACOES_REGISTROS . DOT . SITUACAO_REGISTRO]);
				$menus->setSituacoes_registros($situacoes_registros);
				$menusList[$count] = $menus;
				$count++;
			}
			$this->connection->free($result);
			if ($hasPagination && $count > NUMBER_ZERO) {
				$result = $this->connection->execute($query);
				$size = NUMBER_ZERO;
				while ($row = $result->fetch_assoc()) {
					$size++;
				}
				$this->connection->free($result);				
				$this->size = $size;
			}
			return $menusList;
		}

		public function update($menus) {
			$query = UPDATE . WHITE_SPACE . MENUS . WHITE_SPACE . SET . WHITE_SPACE . ID . WHITE_SPACE . EQUALS . 
					WHITE_SPACE . DOUBLE_QUOTES . $menus->getId() . DOUBLE_QUOTES;
			if (!is_null($menus->getMenu()) && !empty($menus->getMenu())) {
				$query .= COMMA . WHITE_SPACE . MENU . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$menus->getMenu() . DOUBLE_QUOTES;
			}
			if (!is_null($menus->getLink()) && !empty($menus->getLink())) {
				$query .= COMMA . WHITE_SPACE . LINK . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$menus->getLink() . DOUBLE_QUOTES;
			}
			if (!is_null($menus->getOrdem()) && !empty($menus->getOrdem())) {
				$query .= COMMA . WHITE_SPACE . ORDEM . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$menus->getOrdem() . DOUBLE_QUOTES;
			}
			if (!is_null($menus->getTipos_menus()) && !empty($menus->getTipos_menus()->getId()) &&  
					!empty($menus->getTipos_menus()->getId())) {
				$query .= COMMA . WHITE_SPACE . TIPO_MENU . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$menus->getTipos_menus()->getId() . DOUBLE_QUOTES;
			}
			if (!is_null($menus->getSituacoes_registros()) && !empty($menus->getSituacoes_registros()->getId()) &&  
					!empty($menus->getSituacoes_registros()->getId())) {
				$query .= COMMA . WHITE_SPACE . SITUACAO_REGISTRO . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
						$menus->getSituacoes_registros()->getId() . DOUBLE_QUOTES;
			}
			$query .= COMMA . WHITE_SPACE . MODIFICADO . WHITE_SPACE . EQUALS . WHITE_SPACE . DOUBLE_QUOTES . 
					$menus->getModificado() . DOUBLE_QUOTES . WHITE_SPACE . WHERE . WHITE_SPACE . ID . EQUALS . 
					$menus->getId();
			$this->setLog($query);
			return $this->connection->execute($query);
		}

		public function delete($menus) {
			$query = DELETE . WHITE_SPACE . FROM . WHITE_SPACE . MENUS . WHITE_SPACE . WHERE . WHITE_SPACE . ID . 
					WHITE_SPACE . EQUALS . WHITE_SPACE . $menus->getId();
			$this->setLog($query);
			return $this->connection->execute($query);
		}

	}

?>