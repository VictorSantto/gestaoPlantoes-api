<?php

	/**
	 * Generated by Getz Framework.
	 * 
	 * @author  Mario Sakamoto <mskamot@gmail.com>
	 * @see     https://wtag.com.br/getz
	 * @since   1.0.0
	 * @version 1.0.0
	 */
	 
	namespace src\controller;
	use lib\getz;
	use src\model;
	
	class Usuarios extends getz\Activator {
		
		public function __construct() { }
		
		public function init() {
			enableCORS();
			if ($_SERVER[REQUEST_METHOD] == strtoupper(POST)) {
				$usuariosInput = new model\UsuariosInput($this->request);
				if ($usuariosInput->isValid(POST)) {
					$this->daoFactory->beginTransaction();
					$usuariosDao = $this->daoFactory->getUsuariosDao();
					if ($usuariosInput->getFoto() != null) {
						$file = new getz\File($usuariosInput->getFoto());
						$file->moveToImg($this->documentRoot, PROJECT . HYPHEN . API, PROJECT);
						$usuariosInput->setFoto($file->getName());
					}
					$result = $usuariosDao->create($usuariosInput->getEntity());
					$this->log->write(POST, $usuariosDao->getLog(), $this->debug);
					$insertId = $usuariosDao->getInsertId();
					if ($result) {		
						$usuariosList = $usuariosDao->read(USUARIOS . DOT . ID . WHITE_SPACE . EQUALS . 
								WHITE_SPACE . $insertId, STRING_EMPTY, false);
						$this->log->write(GET, $usuariosDao->getLog(), $this->debug);
						$usuariosOutput = new model\UsuariosOutput();
						$this->response[RESPONSE][USUARIOS][VALUE] = $usuariosOutput->getOutputList(
								$usuariosList);									
						$this->response[RESPONSE][USUARIOS][SIZE] = sizeOf(
								$this->response[RESPONSE][USUARIOS][VALUE]);							
						$this->daoFactory->commit();
						$this->response[RESPONSE][STATUS] = NUMBER_TWO_HUNDRED;
						$this->response[RESPONSE][MESSAGE] = SUCCESS;								
					} else {												
						$this->daoFactory->rollback();								
						$this->response[RESPONSE][STATUS] = NUMBER_FIVE_HUNDRED;
						$this->response[RESPONSE][MESSAGE] = INTERNAL_SERVER_ERROR;
					}
					$this->daoFactory->close();					
				} else {
					$this->response[RESPONSE][STATUS] = NUMBER_FOUR_HUNDRED;
					$this->response[RESPONSE][MESSAGE] = $usuariosInput->getError();
				}
			} else if ($_SERVER[REQUEST_METHOD] == strtoupper(GET)) {
				if ($this->resource != STRING_EMPTY) {
					$this->where = USUARIOS . DOT . ID . WHITE_SPACE . EQUALS . WHITE_SPACE . $this->resource;	
				}
				if ($this->order == STRING_EMPTY) {
					$this->order = USUARIOS . DOT . ID . WHITE_SPACE . DESC;
				}
				$this->daoFactory->beginTransaction();
				$usuariosDao = $this->daoFactory->getUsuariosDao();
				$usuariosList = $usuariosDao->read($this->where, $this->order, $this->hasPagination);	
				$this->log->write(GET, $usuariosDao->getLog(), $this->debug);
				$usuariosOutput = new model\UsuariosOutput();
				$this->response[RESPONSE][USUARIOS][VALUE] = $usuariosOutput->getOutputList($usuariosList);													
				$this->daoFactory->close();				
				if ($this->hasPagination) {
					$this->response[RESPONSE][USUARIOS][SIZE] = $usuariosDao->getSize();
					if ($this->response[RESPONSE][USUARIOS][SIZE] == NUMBER_ZERO) {
						$this->response[RESPONSE] = null;
						$this->response[RESPONSE][MESSAGE] = DATA_NOT_FOUND;
					}
				} else {
					$this->response[RESPONSE][USUARIOS][SIZE] = sizeOf(
							$this->response[RESPONSE][USUARIOS][VALUE]);	
					if ($this->response[RESPONSE][USUARIOS][SIZE] == NUMBER_ZERO) {
						$this->response[RESPONSE] = null;
						$this->response[RESPONSE][MESSAGE] = DATA_NOT_FOUND;
					}
				}
				$this->response[RESPONSE][STATUS] = NUMBER_TWO_HUNDRED;
			} else if ($_SERVER[REQUEST_METHOD] == strtoupper(PUT)) {		
				if ($this->resource != STRING_EMPTY && !empty($this->request) && $this->request[ID] == 
						$this->resource) {
					$usuariosInput = new model\UsuariosInput($this->request);
					if ($usuariosInput->isValid(PUT)) {
						$this->daoFactory->beginTransaction();
						$usuariosDao = $this->daoFactory->getUsuariosDao();
						$usuariosList = $usuariosDao->read(USUARIOS . DOT . ID . WHITE_SPACE . EQUALS . 
								WHITE_SPACE . $this->resource, STRING_EMPTY, false);
						$this->log->write(GET, $usuariosDao->getLog(), $this->debug);
						if (!is_null($usuariosList) && sizeOf($usuariosList) > NUMBER_ZERO) {
							if ($usuariosInput->getFoto() != null) {
								$file = new getz\File($usuariosInput->getFoto());
								if ($usuariosList[NUMBER_ZERO]->getFoto() != STRING_EMPTY) {
									$file->deleteImg($this->documentRoot, PROJECT . HYPHEN . API, PROJECT, $usuariosList[NUMBER_ZERO]->getFoto());
								}
								$file->moveToImg($this->documentRoot, PROJECT . HYPHEN . API, PROJECT);
								$usuariosInput->setFoto($file->getName());
							}
							$result = $usuariosDao->update($usuariosInput->getEntity());
							$this->log->write(PUT, $usuariosDao->getLog(), $this->debug);	
							if ($result) {	
								$usuariosList = $usuariosDao->read(USUARIOS . DOT . ID . WHITE_SPACE . EQUALS . 
										WHITE_SPACE . $this->resource, STRING_EMPTY, false);
								$this->log->write(GET, $usuariosDao->getLog(), $this->debug);
								$usuariosOutput = new model\UsuariosOutput();
								$this->response[RESPONSE][USUARIOS][VALUE] = $usuariosOutput->getOutputList(
										$usuariosList);									
								$this->response[RESPONSE][USUARIOS][SIZE] = sizeOf(
										$this->response[RESPONSE][USUARIOS][VALUE]);							
								$this->daoFactory->commit();
								$this->response[RESPONSE][STATUS] = NUMBER_TWO_HUNDRED;
								$this->response[RESPONSE][MESSAGE] = SUCCESS;									
							} else {							
								$this->daoFactory->rollback();
								$this->response[RESPONSE][STATUS] = NUMBER_FIVE_HUNDRED;
								$this->response[RESPONSE][MESSAGE] = INTERNAL_SERVER_ERROR;
							}
						} else {
							$this->response[RESPONSE][STATUS] = NUMBER_TWO_HUNDRED;
							$this->response[RESPONSE][MESSAGE] = DATA_NOT_FOUND;	
						}
						$this->daoFactory->close();
					} else {
						$this->response[RESPONSE][STATUS] = NUMBER_FOUR_HUNDRED;
						$this->response[RESPONSE][MESSAGE] = $usuariosInput->getError();
					}
				} else {
					$this->response[RESPONSE][STATUS] = NUMBER_FOUR_HUNDRED;
					$this->response[RESPONSE][MESSAGE] = BAD_REQUEST;	
				}
			} else if ($_SERVER[REQUEST_METHOD] == strtoupper(DELETE)) {
				if ($this->resource != STRING_EMPTY) {
					$this->daoFactory->beginTransaction();
					$usuariosDao = $this->daoFactory->getUsuariosDao();
					$usuariosList = $usuariosDao->read(USUARIOS . DOT . ID . WHITE_SPACE . EQUALS . WHITE_SPACE . 
							$this->resource, STRING_EMPTY, false);
					$this->log->write(GET, $usuariosDao->getLog(), $this->debug);
					if (!is_null($usuariosList) && sizeOf($usuariosList) > NUMBER_ZERO) {
						$file = new getz\File(STRING_EMPTY);
						if ($usuariosList[NUMBER_ZERO]->getFoto() != STRING_EMPTY) {
							$file->deleteImg($this->documentRoot, PROJECT . HYPHEN . API, PROJECT, $usuariosList[NUMBER_ZERO]->getFoto());
						}
						$result = $usuariosDao->delete($usuariosList[NUMBER_ZERO]);
						$this->log->write(DELETE, $usuariosDao->getLog(), $this->debug);	
						if ($result) {
							$this->daoFactory->commit();
							$this->response[RESPONSE][STATUS] = NUMBER_TWO_HUNDRED;
							$this->response[RESPONSE][MESSAGE] = SUCCESS;							
						} else {
							$this->daoFactory->rollback();
							$this->response[RESPONSE][STATUS] = NUMBER_FIVE_HUNDRED;
							$this->response[RESPONSE][MESSAGE] = INTERNAL_SERVER_ERROR;	
						}
						$this->daoFactory->close();	
					} else {
						$this->response[RESPONSE][STATUS] = NUMBER_TWO_HUNDRED;
						$this->response[RESPONSE][MESSAGE] = DATA_NOT_FOUND;	
					}
				} else {
					$this->response[RESPONSE][STATUS] = NUMBER_FOUR_HUNDRED;
					$this->response[RESPONSE][MESSAGE] = BAD_REQUEST;	
				}				
			} else {
				$this->response[RESPONSE][STATUS] = NUMBER_FOUR_HUNDRED;
				$this->response[RESPONSE][MESSAGE] = BAD_REQUEST;	
			}
			echo json_encode($this->response, JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
		}
		
	}

?>